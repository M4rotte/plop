#!/usr/bin/env bash

[ -n "$1" -a -n "$2"    ] || { printf "Usage: $0 <action> <daemon>\n" 1>&2 && exit 1; }
[ -x "$(which gdb)"     ] || { printf "gdb not found in $PATH\n" 1>&2 && exit 2; }
[ -x "$(which setsid)"  ] || { printf "setsid not found in $PATH\n" 1>&2 && exit 3; }
[ -n "$XDG_RUNTIME_DIR" ] || XDG_RUNTIME_DIR='/tmp'

PLOP_NAME=$(basename $2)

PLOP_RUNDIR="$XDG_RUNTIME_DIR/$PLOP_NAME"
mkdir "$XDG_RUNTIME_DIR/$PLOP_NAME" 2>/dev/null

PLOP_PIDFILE="$PLOP_RUNDIR/$PLOP_NAME.pid"
PLOP_PGIDFILE="$PLOP_RUNDIR/$PLOP_NAME.pgid"

function detach {
    
    # Close standard file descriptors of process with pid $1
    gdb --batch-silent -p $1 -ex "call close(0)" \
                             -ex "call close(1)" \
                             -ex "call close(2)" 2>/dev/null
    }    

case $1 in

    'start')
    
        # If no process with provided name already running:
        # daemonize the process, keep PID and PGID in a file
        [ -f "$PLOP_PIDFILE" ] && { printf "A process named '$NAME' is already running with PID $(cat $PLOP_PIDFILE), PGID $(cat $PLOP_PGIDFILE).\n" && exit 11; }
        [[ "$2" = /* ]] && PLOP_PRG="$2" || PLOP_PRG="$(pwd)/$2"
        PLOP_SCRIPT="cd / && umask 0 && $PLOP_PRG"
        setsid `bash -c "$PLOP_SCRIPT" & printf "%i" $! > $PLOP_PIDFILE && printf "%i" $$ > $PLOP_PGIDFILE` &
        while [ ! -f "$PLOP_PGIDFILE" -o ! -f "$PLOP_PIDFILE" ]; do sleep 0.01; done;
        detach $(cat $PLOP_PIDFILE)
        kill -15 $!

    ;;

    'stop')

      # Stop group of processes according to provided name, getting pgid from the pgid file
      # Remove pid and pgid files, also $PLOP_RUNDIR if empty
      [ -f $PLOP_PGIDFILE ] && {
                           pkill -g $(cat $PLOP_PGIDFILE)
                           [ ! $? ] && printf "No process matched PGID $(cat $PLOP_PGIDFILE)!\n" 1>&2 \
                                    || printf "Processes in PGID $(cat $PLOP_PGIDFILE) have been killed.\n"
                           rm "$PLOP_PGIDFILE"
                          } || printf "No PGID file.\n" 1>&2
                         
      [ -f $PLOP_PIDFILE ] && rm "$PLOP_PIDFILE"
                         
      [ -d $PLOP_RUNDIR ] && rmdir "$PLOP_RUNDIR"
                  
    ;;

    'status')

        # Show processes belonging to the process group for provided name
        [ ! -f $PLOP_PIDFILE ] && printf "$PLOP_PIDFILE does not exist.\n"
        [ -f $PLOP_PGIDFILE ] && pgrep -g $(cat $PLOP_PGIDFILE) | xargs ps -o "%U %p %P %r %a"

    ;;

    'attach')
    
        # Attach stdout and stderr file descriptors of the current terminal to fds 1 and 2 of the corresponding process
        [ ! -f $PLOP_PIDFILE ] && { printf "$PLOP_PIDFILE does not exist.\n" 1>&2 && exit 10; }
        GDBCMDOUT="call open(\"/proc/$$/fd/1\",1)"
        GDBCMDERR="call open(\"/proc/$$/fd/2\",2)"
        gdb --batch-silent -p $(cat $PLOP_PIDFILE) -ex "call close(0)" \
                                              -ex "call close(1)" \
                                              -ex "call close(2)" \
                                              -ex "call open(\"/dev/null\", 0)" \
                                              -ex "$GDBCMDOUT" \
                                              -ex "$GDBCMDERR" 2>/dev/null

    ;;

    
    'detach')
    
        # Detach processâ€™s fds 0 to 2
        [ ! -f $PLOP_PIDFILE ] && { printf "$PLOP_PIDFILE does not exist.\n" 1>&2 && exit 10; }
        detach $(cat $PLOP_PIDFILE)
    
esac








